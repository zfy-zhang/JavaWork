详见博文：https://www.cnkirito.moe/java-random/

Random原理

Random 中的方法比较多，这里就针对比较常见的 nextInt() 和 nextInt(int bound) 方法进行分析，前者会计算出 int 范围内的随机数，后者如果我们传入 10，那么他会返回 [0,10) 之间的 int 类型的随机数，左闭右开。我们首先看一下 Random() 的构造方法:

public Random() {
    // 默认构造方法传入的seed值,
    // 这个值由种子算法得到的一个唯一值与纳秒值通过位运算得到
    // 尽可能做到了和另一个构造方法的seed值的不同
    this(seedUniquifier() ^ System.nanoTime());
}

public Random(long seed) {
    if (getClass() == Random.class)
        this.seed = new AtomicLong(initialScramble(seed));
    else {
        // subclass might have overriden setSeed
        this.seed = new AtomicLong();
        setSeed(seed);
    }
}

private static long seedUniquifier() {
    // L'Ecuyer, "Tables of Linear Congruential Generators of
    // Different Sizes and Good Lattice Structure", 1999
    for (;;) {
        long current = seedUniquifier.get();
        long next = current * 181783497276652981L;
        if (seedUniquifier.compareAndSet(current, next))
            return next;
    }
}

private static final AtomicLong seedUniquifier = new AtomicLong(8682522807148012L);


nextInt()

nextInt() 的代码如下所示：

public int nextInt() {
    return next(32);
}

这个里面直接调用的是 next() 方法，传入的 32，代指的是 Int 类型的位数。

protected int next(int bits) {
    long oldseed, nextseed;
    AtomicLong seed = this.seed;
    do {
        oldseed = seed.get();
        // 根据一定的规则生成nextseed
        nextseed = (oldseed * multiplier + addend) & mask;
        // 更新oldseed的值，通过cas保证线程安全
    } while (!seed.compareAndSet(oldseed, nextseed));
    // 返回前还需要位运算
    return (int)(nextseed >>> (48 - bits));
}


这里会根据 seed 当前的值，通过一定的规则((oldseed * multiplier + addend) & mask; 即伪随机算法)算出下一个 seed，然后进行 CAS，如果 CAS 失败则继续循环上面的操作。最后根据我们需要的 bit 位数来进行返回。核心便是 CAS 算法。


nextInt(int bound)

nextInt(int bound) 的代码如下所示：

public int nextInt(int bound) {
    if (bound <= 0)
        throw new IllegalArgumentException(BadBound);

    int r = next(31);
    int m = bound - 1;
    if ((bound & m) == 0)  // i.e., bound is a power of 2
        r = (int)((bound * (long)r) >> 31);
    else {
        for (int u = r;
             u - (r = u % bound) + m < 0;
             u = next(31))
            ;
    }
    return r;
}


这个流程比 nextInt() 多了几步，具体步骤如下:

    1.首先获取 31 位的随机数，注意这里是 31 位，和上面 32 位不同，因为在 nextInt() 方法中可以获取到随机数可能是负数，而 nextInt(int bound) 规定只能获取到 [0,bound) 之前的随机数，也就意味着必须是正数，预留一位符号位，所以只获取了31位。(不要想着使用取绝对值这样操作，会导致性能下降)

    2.然后进行取 bound 操作。

    3.如果 bound 是2的幂次方，可以直接将第一步获取的值乘以 bound 然后右移31位，解释一下:如果 bound 是4，那么乘以4其实就是左移2位，其实就是变成了33位，再右移31位的话，就又会变成2位，最后，2位 int 的范围其实就是 [0,4) 了。

    4.如果不是 2 的幂，通过模运算进行处理。


 在 current 方法中有:

 public static ThreadLocalRandom current() {
     if (UNSAFE.getInt(Thread.currentThread(), PROBE) == 0)
         // 判断当前线程是否初始化, 如果没有则初始化
         localInit();
     return instance;
 }

 static final void localInit() {
     int p = probeGenerator.addAndGet(PROBE_INCREMENT);
     int probe = (p == 0) ? 1 : p; // skip 0
     long seed = mix64(seeder.getAndAdd(SEEDER_INCREMENT));
     Thread t = Thread.currentThread();
     UNSAFE.putLong(t, SEED, seed);
     UNSAFE.putInt(t, PROBE, probe);
 }


 可以看见如果没有初始化会对其进行初始化，而这里我们的 seed 不再是一个全局变量，而是每个线程私有的，在我们的Thread中有三个变量:

     threadLocalRandomSeed：ThreadLocalRandom 使用它来控制随机数种子。

     threadLocalRandomProbe：ThreadLocalRandom 使用它来控制初始化。

     threadLocalRandomSecondarySeed：二级种子。

 可以看见所有的变量都加了 @sun.misc.Contended 这个注解，用来处理伪共享问题。

 在 nextInt() 方法当中代码如下:

 public int nextInt() {
     return mix32(nextSeed());
 }

 final long nextSeed() {
     Thread t; long r; // read and update per-thread seed
     UNSAFE.putLong(t = Thread.currentThread(), SEED,
                    r = UNSAFE.getLong(t, SEED) + GAMMA);
     return r;
 }


 我们的关键代码如下:

     UNSAFE.putLong(t = Thread.currentThread(), SEED,r=UNSAFE.getLong(t, SEED) + GAMMA);

 可以看见由于我们每个线程各自都维护了种子，这个时候并不需要 CAS，直接进行 put，在这里利用线程之间隔离，减少了并发冲突；相比较 ThreadLocal<Random>，ThreadLocalRandom 不仅仅减少了对象维护的成本，其内部实现也更轻量级。所以 ThreadLocalRandom 性能很高。